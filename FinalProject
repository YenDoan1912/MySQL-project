--Task 3: Counting Cities per State
SELECT 
    State_Name,
    State_ab,
    COUNT(DISTINCT City) AS city_count
FROM 
    US_Household_Income
GROUP BY 
    State_Name, State_ab
ORDER BY 
    city_count DESC;
-- Task 6: Using Window Functions for Ranking
SELECT 
    State_Name,
    State_ab,
    City,
    ALand AS Land_Area,
    ROW_NUMBER() OVER (PARTITION BY State_Name ORDER BY ALand DESC) AS Ranks
FROM 
    US_Household_Income
ORDER BY 
    State_Name, Ranks;
-- Task 9: Identifying Cities with High Water to Land Ratios
SELECT 
    State_Name,
    State_ab,
    City,
    ALand AS Land_Area,
    AWater AS Water_Area,
    (AWater / ALand) AS Water_to_Land_Ratio
FROM 
    US_Household_Income
WHERE 
    (AWater / ALand) > 0.5
ORDER BY 
    Water_to_Land_Ratio DESC;
-- Task 12: Complex Multi-Level Subqueries
WITH OverallAverage AS (
    SELECT AVG(ALand) AS OverallAvgLand
    FROM US_Household_Income
),


StateAverage AS (
    SELECT 
        State_Name,
        AVG(ALand) AS AvgLandArea
    FROM 
        US_Household_Income
    GROUP BY 
        State_Name
)


SELECT 
    StateAverage.State_Name,
    StateAverage.AvgLandArea
FROM 
    StateAverage,
    OverallAverage
WHERE 
    StateAverage.AvgLandArea > OverallAverage.OverallAvgLand
ORDER BY 
    StateAverage.AvgLandArea DESC;

-- Task 15: Data Anomalies Detection
WITH StateStats AS (
    SELECT 
        State_Name,
        AVG(ALand) AS AvgLandArea,
        STDDEV(ALand) AS StdDevLandArea
    FROM 
        US_Household_Income
    GROUP BY 
        State_Name
),

CityZScores AS (
    SELECT 
        u.State_Name,
        u.State_ab,
        u.City,
        u.ALand AS Land_Area,
        s.AvgLandArea,
        s.StdDevLandArea,
        (u.ALand - s.AvgLandArea) / s.StdDevLandArea AS ZScore
    FROM 
        US_Household_Income u
    JOIN 
        StateStats s ON u.State_Name = s.State_Name
)

SELECT 
    State_Name,
    State_ab,
    City,
    Land_Area,
    AvgLandArea,
    ZScore AS Anomaly_Score
FROM 
    CityZScores
WHERE 
    ABS(ZScore) > 2
ORDER BY 
    ABS(ZScore) DESC;
-- Task 18: Advanced Data Encryption and Security
-- add thêm cột mã hóa 
ALTER TABLE US_Household_Income
ADD COLUMN Encrypted_Zip_Code BLOB,
ADD COLUMN Encrypted_Area_Code BLOB;
-- Mã hóa dữ liệu
SET @encryption_key = 'MySecretEncryptionKey123!';

UPDATE US_Household_Income
SET Encrypted_Zip_Code = AES_ENCRYPT(CAST(Zip_Code AS CHAR), @encryption_key),
    Encrypted_Area_Code = AES_ENCRYPT(Area_Code, @encryption_key);
-- Giải mã dlieu
SET @encryption_key = 'MySecretEncryptionKey123!';

SELECT 
    City,
    State_Name,
    AES_DECRYPT(Encrypted_Zip_Code, @encryption_key) AS Decrypted_Zip_Code,
    AES_DECRYPT(Encrypted_Area_Code, @encryption_key) AS Decrypted_Area_Code
FROM 
    US_Household_Income;

--Task 21: Hotspot Detection 
-- Gtri tbinh và độ lệch chuẩn dt đất
WITH LandStats AS (
    SELECT 
        AVG(ALand) AS mean_land,
        STDDEV(ALand) AS stddev_land
    FROM US_Household_Income
),

-- Gtri tbinh và độ lệch chuẩn dt nước
WaterStats AS (
    SELECT 
        AVG(AWater) AS mean_water,
        STDDEV(AWater) AS stddev_water
    FROM US_Household_Income
),

-- Z-Scores vùng đất, nước cho mỗi thành phố 
ZScores AS (
    SELECT 
        City,
        State_Name,
        ALand,
        AWater,
        (ALand - (SELECT mean_land FROM LandStats)) / (SELECT stddev_land FROM LandStats) AS Z_Land,
        (AWater - (SELECT mean_water FROM WaterStats)) / (SELECT stddev_water FROM WaterStats) AS Z_Water
    FROM US_Household_Income
),

-- Sai lệch tổng thể
DeviationScores AS (
    SELECT 
        City,
        State_Name,
        ALand,
        AWater,
        Z_Land,
        Z_Water,
        ABS(Z_Land) + ABS(Z_Water) AS Deviation_Score
    FROM ZScores
)

-- Thành phố có điểm sai lệch cao nhất.
SELECT 
    City,
    State_Name,
    ALand AS Land_Area,
    AWater AS Water_Area,
    Deviation_Score
FROM DeviationScores
ORDER BY Deviation_Score DESC;

